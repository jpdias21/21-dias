let arrayA = [13,20,10,22,24,20,27,17,19,14]
let arrayB = [24,22,23,11,15,17,29,14,16,21]

let arrayQuestao= []
for(let i = 0 ; i <= 10 ; i++){
    let questao = parseInt(prompt('Digite o numero que voce acha que esta nos array'))
    arrayQuestao.push(questao)
}
console.log(arrayQuestao)

let filtro = arrayQuestao.filter(elemento =>  arrayA.includes(elemento) || arrayB.includes(elemento))

console.log(filtro)

let filtroSemRepeticao = [... new Set(filtro)]

console.log(filtroSemRepeticao)

// Vamos explicar o que est√° acontecendo nesse c√≥digo de uma forma bem simples, para que voc√™ possa entender e colocar no seu VSCode para ler e estudar. üòä

// O que √© esse c√≥digo?
// Esse c√≥digo faz duas coisas:

// Filtra elementos de um array (arrayQuestao) com base em dois outros arrays (arrayA e arrayB).

// Remove elementos repetidos do resultado filtrado.

// Vamos detalhar cada parte:

// Parte 1: O filtro
// javascript
// Copy
// let filtro = arrayQuestao.filter(elemento => arrayA.includes(elemento) || arrayB.includes(elemento));
// O que est√° acontecendo aqui?
// arrayQuestao: √â o array principal, onde est√£o os elementos que voc√™ quer filtrar.

// arrayA e arrayB: S√£o dois arrays que cont√™m os valores que voc√™ quer usar como crit√©rio de filtro.

// filter(): √â um m√©todo que cria um novo array com os elementos que passam em um teste.

// includes(): √â um m√©todo que verifica se um valor existe em um array.

// O que esse c√≥digo faz?
// Ele percorre cada elemento de arrayQuestao.

// Para cada elemento, ele verifica se esse elemento existe em arrayA ou em arrayB (usando o operador ||).

// Se o elemento existir em arrayA ou arrayB, ele √© inclu√≠do no novo array filtro.

// Exemplo pr√°tico:
// Suponha que:

// arrayQuestao = [1, 2, 3, 4, 5]

// arrayA = [2, 4]

// arrayB = [5, 6]

// O c√≥digo vai:

// Verificar se 1 est√° em arrayA ou arrayB ‚Üí n√£o est√° ‚Üí descarta.

// Verificar se 2 est√° em arrayA ou arrayB ‚Üí est√° em arrayA ‚Üí inclui no filtro.

// Verificar se 3 est√° em arrayA ou arrayB ‚Üí n√£o est√° ‚Üí descarta.

// Verificar se 4 est√° em arrayA ou arrayB ‚Üí est√° em arrayA ‚Üí inclui no filtro.

// Verificar se 5 est√° em arrayA ou arrayB ‚Üí est√° em arrayB ‚Üí inclui no filtro.

// Resultado do filtro:

// javascript
// Copy
// [2, 4, 5]
// Parte 2: Removendo repeti√ß√µes
// javascript
// Copy
// let filtroSemRepeticao = [...new Set(filtro)];
// O que est√° acontecendo aqui?
// Set: √â uma estrutura de dados que s√≥ permite valores √∫nicos. Se voc√™ passar um array para ele, ele automaticamente remove os valores repetidos.

// [...new Set(filtro)]: Aqui, estamos criando um Set a partir do array filtro e depois convertendo ele de volta para um array usando o operador de espalhamento (...).

// O que esse c√≥digo faz?
// Ele pega o array filtro (que pode ter elementos repetidos) e remove as repeti√ß√µes, criando um novo array filtroSemRepeticao.

// Exemplo pr√°tico:
// Suponha que o filtro seja:

// javascript
// Copy
// [2, 4, 5, 2, 5]
// O c√≥digo vai:

// Criar um Set a partir desse array ‚Üí Set s√≥ permite valores √∫nicos, ent√£o ele remove as repeti√ß√µes.

// Converter o Set de volta para um array.

// Resultado do filtroSemRepeticao:

// javascript
// Copy
// [2, 4, 5]
// Resumo do que o c√≥digo faz:
// Filtra elementos:

// Cria um novo array (filtro) com os elementos de arrayQuestao que existem em arrayA ou arrayB.

// Remove repeti√ß√µes:

// Cria um novo array (filtroSemRepeticao) a partir do filtro, removendo os elementos repetidos.

// Exemplo completo:
// Suponha que:

// javascript
// Copy
// let arrayQuestao = [1, 2, 3, 4, 5, 2, 5];
// let arrayA = [2, 4];
// let arrayB = [5, 6];
// O c√≥digo:

// javascript
// Copy
// let filtro = arrayQuestao.filter(elemento => arrayA.includes(elemento) || arrayB.includes(elemento));
// console.log(filtro); // [2, 4, 5, 2, 5]

// let filtroSemRepeticao = [...new Set(filtro)];
// console.log(filtroSemRepeticao); // [2, 4, 5]
// Quando usar isso?
// Esse c√≥digo √© √∫til quando voc√™ precisa:

// Filtrar elementos de um array com base em crit√©rios de outros arrays.

// Garantir que o resultado final n√£o tenha elementos repetidos.

// Por exemplo:

// Filtrar uma lista de produtos que est√£o em promo√ß√£o (arrayA) ou em estoque (arrayB).

// Remover duplicatas de uma lista de n√∫meros ou strings.

// Agora voc√™ j√° sabe o que esse c√≥digo faz e como ele funciona! üòä